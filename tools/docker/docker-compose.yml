version: '3.8'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: eco-hydrate-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-1
      - frontend-2
      - frontend-3
    restart: unless-stopped
    networks:
      - app-network

  # ðŸ”¥ Frontend Instance (Load Balanced)
  frontend-1: &frontend
    build:
      context: ../../apps/frontend
      dockerfile: Dockerfile
    container_name: eco-hydrate-frontend-1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=frontend-1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  frontend-2:
    <<: *frontend
    container_name: eco-hydrate-frontend-2
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=frontend-2

  frontend-3:
    <<: *frontend
    container_name: eco-hydrate-frontend-3
    environment:
      - NODE_ENV=production  
      - PORT=3000
      - INSTANCE_ID=frontend-3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: eco-hydrate-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: eco-hydrate-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=eco123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge
