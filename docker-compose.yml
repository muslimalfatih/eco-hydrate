version: '3.8'

services:
  # Frontend Application (3 instances for load balancing)
  frontend-1: &frontend
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: eco-hydrate-frontend-1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=frontend-1
      - DATABASE_URL=${DATABASE_URL}
      - UPSTASH_REDIS_REST_URL=${UPSTASH_REDIS_REST_URL}
      - UPSTASH_REDIS_REST_TOKEN=${UPSTASH_REDIS_REST_TOKEN}
      - NEXT_PUBLIC_POSTHOG_KEY=${NEXT_PUBLIC_POSTHOG_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${NEXT_PUBLIC_POSTHOG_HOST}
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
      - monitoring
    depends_on:
      - postgres
      - redis

  frontend-2:
    <<: *frontend
    container_name: eco-hydrate-frontend-2
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=frontend-2
      - DATABASE_URL=${DATABASE_URL}
      - UPSTASH_REDIS_REST_URL=redis://redis:6379
      - NEXT_PUBLIC_POSTHOG_KEY=${NEXT_PUBLIC_POSTHOG_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${NEXT_PUBLIC_POSTHOG_HOST}
    ports:
      - "3001:3000"

  frontend-3:
    <<: *frontend
    container_name: eco-hydrate-frontend-3
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=frontend-3
      - DATABASE_URL=${DATABASE_URL}
      - UPSTASH_REDIS_REST_URL=redis://redis:6379
      - NEXT_PUBLIC_POSTHOG_KEY=${NEXT_PUBLIC_POSTHOG_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${NEXT_PUBLIC_POSTHOG_HOST}
    ports:
      - "3002:3000"

  # NGINX LOAD BALANCER
  nginx:
    image: nginx:alpine
    container_name: eco-hydrate-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./tools/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-1
      - frontend-2
      - frontend-3
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # POSTGRESQL DATABASE
  postgres:
    image: postgres:15-alpine
    container_name: eco-hydrate-postgres
    environment:
      POSTGRES_DB: eco_hydrate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: eco2025
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # REDIS CACHE
  redis:
    image: redis:7-alpine
    container_name: eco-hydrate-redis
    command: redis-server --appendonly yes --replica-read-only no --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PROMETHEUS - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: eco-hydrate-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./tools/docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - frontend-1

  # GRAFANA - Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: eco-hydrate-grafana
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=eco2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tools/docker/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./tools/docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring

  # NODE EXPORTER - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: eco-hydrate-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  # CADVISOR - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: eco-hydrate-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge
